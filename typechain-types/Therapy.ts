/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Therapy {
  export type SlotStruct = {
    index: PromiseOrValue<BigNumberish>;
    date: PromiseOrValue<string>;
    slotTime: PromiseOrValue<string>;
    createdBy: PromiseOrValue<string>;
    bookedBy: PromiseOrValue<string>;
    isAvailable: PromiseOrValue<boolean>;
    isCompleted: PromiseOrValue<boolean>;
    link: PromiseOrValue<string>;
  };

  export type SlotStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    boolean,
    boolean,
    string
  ] & {
    index: BigNumber;
    date: string;
    slotTime: string;
    createdBy: string;
    bookedBy: string;
    isAvailable: boolean;
    isCompleted: boolean;
    link: string;
  };

  export type TherapistStruct = {
    name: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    walletAddress: PromiseOrValue<string>;
    qualification: PromiseOrValue<string>;
    about: PromiseOrValue<string>;
    specialization: PromiseOrValue<string>;
    payPerSlot: PromiseOrValue<BigNumberish>;
  };

  export type TherapistStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    name: string;
    image: string;
    walletAddress: string;
    qualification: string;
    about: string;
    specialization: string;
    payPerSlot: BigNumber;
  };
}

export interface TherapyInterface extends utils.Interface {
  functions: {
    "addSlot(string,string)": FunctionFragment;
    "addTherapist(string,string,address,string,string,string,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "bookSlot(uint256,string)": FunctionFragment;
    "getAllSlots()": FunctionFragment;
    "getAllSlotsByBookedBy()": FunctionFragment;
    "getAllSlotsByCreatedBy(address)": FunctionFragment;
    "getAllTherapists()": FunctionFragment;
    "slots(uint256)": FunctionFragment;
    "therapistToSlots(address,uint256)": FunctionFragment;
    "therapists(uint256)": FunctionFragment;
    "userToBookedSlots(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSlot"
      | "addTherapist"
      | "admin"
      | "bookSlot"
      | "getAllSlots"
      | "getAllSlotsByBookedBy"
      | "getAllSlotsByCreatedBy"
      | "getAllTherapists"
      | "slots"
      | "therapistToSlots"
      | "therapists"
      | "userToBookedSlots"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSlot",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTherapist",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bookSlot",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSlots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSlotsByBookedBy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSlotsByCreatedBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTherapists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "therapistToSlots",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "therapists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userToBookedSlots",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addSlot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTherapist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookSlot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSlotsByBookedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSlotsByCreatedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTherapists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "therapistToSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "therapists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userToBookedSlots",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Therapy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TherapyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSlot(
      _date: PromiseOrValue<string>,
      _slotTime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTherapist(
      _name: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _walletAddress: PromiseOrValue<string>,
      _qualification: PromiseOrValue<string>,
      _about: PromiseOrValue<string>,
      _specialization: PromiseOrValue<string>,
      _payPerSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    bookSlot(
      _slotIndex: PromiseOrValue<BigNumberish>,
      _link: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllSlots(
      overrides?: CallOverrides
    ): Promise<[Therapy.SlotStructOutput[]]>;

    getAllSlotsByBookedBy(
      overrides?: CallOverrides
    ): Promise<[Therapy.SlotStructOutput[]]>;

    getAllSlotsByCreatedBy(
      _createdBy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Therapy.SlotStructOutput[]]>;

    getAllTherapists(
      overrides?: CallOverrides
    ): Promise<[Therapy.TherapistStructOutput[]]>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, boolean, boolean, string] & {
        index: BigNumber;
        date: string;
        slotTime: string;
        createdBy: string;
        bookedBy: string;
        isAvailable: boolean;
        isCompleted: boolean;
        link: string;
      }
    >;

    therapistToSlots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    therapists(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber] & {
        name: string;
        image: string;
        walletAddress: string;
        qualification: string;
        about: string;
        specialization: string;
        payPerSlot: BigNumber;
      }
    >;

    userToBookedSlots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addSlot(
    _date: PromiseOrValue<string>,
    _slotTime: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTherapist(
    _name: PromiseOrValue<string>,
    _image: PromiseOrValue<string>,
    _walletAddress: PromiseOrValue<string>,
    _qualification: PromiseOrValue<string>,
    _about: PromiseOrValue<string>,
    _specialization: PromiseOrValue<string>,
    _payPerSlot: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  bookSlot(
    _slotIndex: PromiseOrValue<BigNumberish>,
    _link: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllSlots(overrides?: CallOverrides): Promise<Therapy.SlotStructOutput[]>;

  getAllSlotsByBookedBy(
    overrides?: CallOverrides
  ): Promise<Therapy.SlotStructOutput[]>;

  getAllSlotsByCreatedBy(
    _createdBy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Therapy.SlotStructOutput[]>;

  getAllTherapists(
    overrides?: CallOverrides
  ): Promise<Therapy.TherapistStructOutput[]>;

  slots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string, boolean, boolean, string] & {
      index: BigNumber;
      date: string;
      slotTime: string;
      createdBy: string;
      bookedBy: string;
      isAvailable: boolean;
      isCompleted: boolean;
      link: string;
    }
  >;

  therapistToSlots(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  therapists(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, BigNumber] & {
      name: string;
      image: string;
      walletAddress: string;
      qualification: string;
      about: string;
      specialization: string;
      payPerSlot: BigNumber;
    }
  >;

  userToBookedSlots(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addSlot(
      _date: PromiseOrValue<string>,
      _slotTime: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTherapist(
      _name: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _walletAddress: PromiseOrValue<string>,
      _qualification: PromiseOrValue<string>,
      _about: PromiseOrValue<string>,
      _specialization: PromiseOrValue<string>,
      _payPerSlot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    bookSlot(
      _slotIndex: PromiseOrValue<BigNumberish>,
      _link: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllSlots(overrides?: CallOverrides): Promise<Therapy.SlotStructOutput[]>;

    getAllSlotsByBookedBy(
      overrides?: CallOverrides
    ): Promise<Therapy.SlotStructOutput[]>;

    getAllSlotsByCreatedBy(
      _createdBy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Therapy.SlotStructOutput[]>;

    getAllTherapists(
      overrides?: CallOverrides
    ): Promise<Therapy.TherapistStructOutput[]>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, boolean, boolean, string] & {
        index: BigNumber;
        date: string;
        slotTime: string;
        createdBy: string;
        bookedBy: string;
        isAvailable: boolean;
        isCompleted: boolean;
        link: string;
      }
    >;

    therapistToSlots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    therapists(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber] & {
        name: string;
        image: string;
        walletAddress: string;
        qualification: string;
        about: string;
        specialization: string;
        payPerSlot: BigNumber;
      }
    >;

    userToBookedSlots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addSlot(
      _date: PromiseOrValue<string>,
      _slotTime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTherapist(
      _name: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _walletAddress: PromiseOrValue<string>,
      _qualification: PromiseOrValue<string>,
      _about: PromiseOrValue<string>,
      _specialization: PromiseOrValue<string>,
      _payPerSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    bookSlot(
      _slotIndex: PromiseOrValue<BigNumberish>,
      _link: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllSlots(overrides?: CallOverrides): Promise<BigNumber>;

    getAllSlotsByBookedBy(overrides?: CallOverrides): Promise<BigNumber>;

    getAllSlotsByCreatedBy(
      _createdBy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllTherapists(overrides?: CallOverrides): Promise<BigNumber>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    therapistToSlots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    therapists(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToBookedSlots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSlot(
      _date: PromiseOrValue<string>,
      _slotTime: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTherapist(
      _name: PromiseOrValue<string>,
      _image: PromiseOrValue<string>,
      _walletAddress: PromiseOrValue<string>,
      _qualification: PromiseOrValue<string>,
      _about: PromiseOrValue<string>,
      _specialization: PromiseOrValue<string>,
      _payPerSlot: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bookSlot(
      _slotIndex: PromiseOrValue<BigNumberish>,
      _link: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllSlots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllSlotsByBookedBy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllSlotsByCreatedBy(
      _createdBy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllTherapists(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    therapistToSlots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    therapists(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToBookedSlots(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
